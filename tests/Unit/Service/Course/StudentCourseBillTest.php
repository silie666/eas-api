<?php

namespace Service\Course;

use App\Models\Card\Card;
use App\Models\Course\StudentCourseBill;
use App\Services\Course\StudentCourseBillService;
use Package\Exceptions\Client\BadRequestException;
use Tests\TestCase;

class StudentCourseBillTest extends TestCase
{
    protected static $card;
    protected static $studentCourseBill;

    protected function setUpOnce(): void
    {
        parent::setUpOnce(); // TODO: Change the autogenerated stub
    }

    protected function createBill()
    {
        static::$card              = Card::factory()->create();
        static::$studentCourseBill = StudentCourseBill::factory()->create();
    }

    /**
     * 测试支付
     *
     * @return void
     */
    public function testPay()
    {
        $this->createBill();
        $this->mockClass(\OmiseToken::class)
            ->shouldReceive('create')
            ->andReturnUsing(function () {
                $mock = \Mockery::mock();
                $mock->shouldReceive('offsetGet')
                    ->with('id')
                    ->andReturn('token_test_' . \Str::random());
                return $mock;
            });
        $this->mockClass(\OmiseCharge::class)
            ->shouldReceive('create')
            ->andReturnUsing(function () {
                $mock = \Mockery::mock();
                $mock->shouldReceive('toArray')
                    ->andReturn([
                        'id'     => 'chrg_test_' . \Str::random(),
                        'status' => 'successful',
                    ]);
                return $mock;
            });
        $paidFees = static::$studentCourseBill->bill_fees;
        StudentCourseBillService::pay(static::$card, static::$studentCourseBill);
        static::$studentCourseBill->refresh();
        $this->assertEquals(cons('course.student.bill.pay_status.paid'), static::$studentCourseBill->pay_status);
        $this->assertEquals($paidFees, static::$studentCourseBill->paid_fees);
    }

    /**
     * 测试支付后的订单再次支付异常
     *
     * @depends testPay
     */
    public function testPayException()
    {
        $this->expectException(BadRequestException::class);
        $this->expectExceptionMessage('账单无法支付！');
        StudentCourseBillService::pay(static::$card, static::$studentCourseBill);
    }

    /**
     * 测试支付失败
     *
     * @return void
     */
    public function testPayFail()
    {
        $this->createBill();
        $this->mockClass(\OmiseToken::class)
            ->shouldReceive('create')
            ->andReturnUsing(function () {
                $mock = \Mockery::mock();
                $mock->shouldReceive('offsetGet')
                    ->with('id')
                    ->andReturn('token_test_' . \Str::random());
                return $mock;
            });
        $this->mockClass(\OmiseCharge::class)
            ->shouldReceive('create')
            ->andReturnUsing(function () {
                $mock = \Mockery::mock();
                $mock->shouldReceive('toArray')
                    ->andReturn([
                        'id'     => 'chrg_test_' . \Str::random(),
                        'status' => 'failed',
                    ]);
                return $mock;
            });
        StudentCourseBillService::pay(static::$card, static::$studentCourseBill);
        static::$studentCourseBill->refresh();
        $this->assertEquals(cons('course.student.bill.pay_status.fail'), static::$studentCourseBill->pay_status);
        $this->assertNull(static::$studentCourseBill->paid_fees);
    }
}